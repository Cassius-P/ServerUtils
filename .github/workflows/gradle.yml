name: Build and Release Forge Mod

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.VERSION }}
    steps:
    - uses: actions/checkout@v3

    - name: Fetch all tags
      run: git fetch --tags

    - name: Set version based on latest tag
      if: github.ref == 'refs/heads/main'
      run: echo "VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV

    - name: Extract version from tag
      if: startsWith(github.ref, 'refs/tags/')
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV  # Remove 'v' from the tag

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25
      with:
        arguments: build -Pversion=${{ env.VERSION }}

  prepare_release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}  # Capture the upload_url here
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  release:
    needs: [build, prepare_release]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.build.outputs.version }}  # Set VERSION from build job output
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v3

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ needs.prepare_release.outputs.upload_url }}
        asset_path: ./build/libs/serverutils-${{ env.VERSION }}.jar  # Use env.VERSION
        asset_name: serverutils-${{ env.VERSION }}.jar  # Use env.VERSION
        asset_content_type: application/java-archive
